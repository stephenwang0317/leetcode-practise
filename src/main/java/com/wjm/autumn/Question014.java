package com.wjm.autumn;

import com.wjm.utils.InputConverter;

import java.util.ArrayDeque;
import java.util.Stack;

/**
 * 200. 岛屿数量
 * 给你一个由 '1'（陆地）和 '0'（水）组成的的二维网格，请你计算网格中岛屿的数量。
 * 岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。
 * 此外，你可以假设该网格的四条边均被水包围。
 */
public class Question014 {
    public int numIslands(char[][] grid) {
        ArrayDeque<int[]> stack = new ArrayDeque<>();
        int fillNum = 'a';

        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[i].length; j++) {
                if (grid[i][j] != '1') continue;
                stack.offerFirst(new int[]{i, j});
                grid[i][j] = (char) fillNum;
                while (!stack.isEmpty()) {
                    int[] ord = stack.pollFirst();
                    int row = ord[0], col = ord[1];
                    if (row - 1 >= 0 && grid[row - 1][col] == '1') {
                        grid[row - 1][col] = (char) fillNum;
                        stack.offerLast(new int[]{row - 1, col});
                    }
                    if (row + 1 < grid.length && grid[row + 1][col] == '1') {
                        grid[row + 1][col] = (char) fillNum;
                        stack.offerLast(new int[]{row + 1, col});
                    }
                    if (col - 1 >= 0 && grid[row][col - 1] == '1') {
                        grid[row][col - 1] = (char) fillNum;
                        stack.offerLast(new int[]{row, col - 1});
                    }
                    if (col + 1 < grid[0].length && grid[row][col + 1] == '1') {
                        grid[row][col + 1] = (char) fillNum;
                        stack.offerLast(new int[]{row, col + 1});
                    }
                }
                fillNum++;
            }
        }
        return fillNum - 'a';
    }

    public static void main(String[] args) {
        char[][] ints = InputConverter.stringToCharArray
        Question014 q = new Question014();
        int i = q.numIslands(ints);
        System.out.println(i);
    }
}
